.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Align::Subset 3"
.TH Bio::Align::Subset 3 "2012-11-02" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Align::Subset \- A BioPerl module to generate new alignments as subset from larger alignments
.SH "VERSION"
.IX Header "VERSION"
Version 1.04
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Data::Dumper;
\&    
\&    use Bio::Align::Subset;
\&    
\&    # The alignment in a file
\&    my $filename = "alignmentfile.fas";
\&    # The format
\&    my $format = "fasta";
\&    
\&    # The subset of codons
\&    my $subset = [1,12,25,34,65,100,153,156,157,158,159,160,200,201,202,285];
\&    
\&    # Create the object
\&    my $obj = Bio::Align::Subset\->new(
\&                                      file => $filename,
\&                                      format => $format
\&                                    );
\&    
\&    # View the result
\&    # This function returns a Bio::SimpleAlign object
\&    print Dumper($obj\->build_subset($subset));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Given an array of codon positions and an alignment, the function
Bio::Align::Subset\->build_subset returns a new alignment with the codons at
those positions from the original alignment.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.SS "Bio::Align::Subset\->\fInew()\fP"
.IX Subsection "Bio::Align::Subset->new()"
.Vb 1
\&    $Obj = Bio::Align::Subset\->new(file => \*(Aqfilename\*(Aq, format => \*(Aqformat\*(Aq)
.Ve
.PP
The new class method constructs a new Bio::Align::Subset object.
The returned object can be used to retrieve, print and generate subsets
from alignment objects. new accepts the following parameters:
.IP "file" 1
.IX Item "file"
A file path to be opened for reading or writing.  The usual Perl
conventions apply:
.Sp
.Vb 6
\&   \*(Aqfile\*(Aq       # open file for reading
\&   \*(Aq>file\*(Aq      # open file for writing
\&   \*(Aq>>file\*(Aq     # open file for appending
\&   \*(Aq+<file\*(Aq     # open file read/write
\&   \*(Aqcommand |\*(Aq  # open a pipe from the command
\&   \*(Aq| command\*(Aq  # open a pipe to the command
.Ve
.IP "format" 1
.IX Item "format"
Specify the format of the file.  Supported formats include fasta,
genbank, embl, swiss (SwissProt), Entrez Gene and tracefile formats
such as abi (\s-1ABI\s0) and scf. There are many more, for a complete listing
see the SeqIO \s-1HOWTO\s0 (<http://bioperl.open\-bio.org/wiki/HOWTO:SeqIO>).
.Sp
If no format is specified and a filename is given then the module will
attempt to deduce the format from the filename suffix. If there is no
suffix that Bioperl understands then it will attempt to guess the
format based on file content. If this is unsuccessful then SeqIO will 
throw a fatal error.
.Sp
The format name is case-insensitive: '\s-1FASTA\s0', 'Fasta' and 'fasta' are
all valid.
.Sp
Currently, the tracefile formats (except for \s-1SCF\s0) require installation
of the external Staden \*(L"io_lib\*(R" package, as well as the
Bio::SeqIO::staden::read package available from the bioperl-ext
repository.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.SS "build_subset($index_list)"
.IX Subsection "build_subset($index_list)"
.Vb 1
\&    my $subset = $obj\->build_subset([1,12,25,34,65,100,153,156,157,158,159]);
.Ve
.PP
Build a new alignment with the specified codons in \f(CW$index_list\fR. It returns
a Bio::SimpleAlign object.
.SH "ACCESSOR METHODS"
.IX Header "ACCESSOR METHODS"
.SS "get_count"
.IX Subsection "get_count"
.Vb 5
\&    Title   : get_count
\&    Usage   : $instance_no = $obj\->get_count
\&    Function: 
\&    Returns : Number of istances for this class
\&    Args    :
.Ve
.SS "get_file"
.IX Subsection "get_file"
.Vb 5
\&    Title   : get_file
\&    Usage   : $file_path = $obj\->get_file
\&    Function:
\&    Returns : The file name of the alignment
\&    Args    :
.Ve
.SS "get_format"
.IX Subsection "get_format"
.Vb 5
\&    Title   : get_format
\&    Usage   : $format = $obj\->get_format
\&    Function:
\&    Returns : The alignment format (fasta, phylip, etc.)
\&    Args    :
.Ve
.SS "get_identifiers"
.IX Subsection "get_identifiers"
.Vb 5
\&    Title   : get_identifiers
\&    Usage   : $identifiers $obj\->get_identifiers
\&    Function:
\&    Returns : An array reference with all the identifiers in an alignment
\&    Args    :
.Ve
.SS "get_seq_length"
.IX Subsection "get_seq_length"
.Vb 5
\&    Title   : get_seq_length
\&    Usage   : $long = $obj\->get_seq_length
\&    Function:
\&    Returns : The longitude of all the sequences in an alignment
\&    Args    :
.Ve
.SS "get_sequences"
.IX Subsection "get_sequences"
.Vb 5
\&    Title   : get_sequences
\&    Usage   : $sequences = $obj\->get_sequences
\&    Function:
\&    Returns : An array reference with all the sequences in an alignment
\&    Args    :
.Ve
.SH "MUTATOR METHODS"
.IX Header "MUTATOR METHODS"
.SS "set_file"
.IX Subsection "set_file"
.Vb 5
\&    Title   : set_file
\&    Usage   : $obj\->set_file(\*(Aqfilename\*(Aq)
\&    Function: Set the file path for an alignment
\&    Returns : 
\&    Args    : String
.Ve
.SS "set_format"
.IX Subsection "set_format"
.Vb 5
\&    Title   : set_format
\&    Usage   : $obj\->set_format(\*(Aqfasta\*(Aq)
\&    Function: Set the file format for an alignment
\&    Returns :
\&    Args    : String
.Ve
.SS "set_identifiers"
.IX Subsection "set_identifiers"
.Vb 5
\&    Title   : set_identifiers
\&    Usage   : $obj\->set_identifiers(\e@array_ids)
\&    Function: Change the identifiers for all the sequences in the alignment
\&    Returns :
\&    Args    : List
.Ve
.SS "set_sequences"
.IX Subsection "set_sequences"
.Vb 5
\&    Title   : set_sequences
\&    Usage   : $obj\->set_sequences(\e@array_seqs)
\&    Function: Change the sequences in the alignment
\&    Returns :
\&    Args    : List
.Ve
.SH "AUTHOR \- Hector Valverde"
.IX Header "AUTHOR - Hector Valverde"
Hector Valverde, \f(CW\*(C`<hvalverde@uma.es>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Juan Carlos Aledo, \f(CW\*(C`<caledo@uma.es>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-bio\-align\-subset at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Bio\-Align\-Subset>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Bio::Align::Subset
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Bio\-Align\-Subset>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Bio\-Align\-Subset>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Bio\-Align\-Subset>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Bio\-Align\-Subset/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2012 Hector Valverde and Juan Carlos Aledo.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
